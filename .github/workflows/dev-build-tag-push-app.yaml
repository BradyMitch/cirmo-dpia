name: Github Environment - Test Deployment - DPIA WebApp

on:
  workflow_dispatch:
  
jobs:
  Test-DPIA-App-Build-Tag-Push:
    runs-on: ubuntu-latest
    environment: APP-Dev
    steps:
    
      # Checkout CIRMO-DPIA Github Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Find Latest Commit on Github Repository main branch (last PR merged to main)
      - name: Set Commit Hash for Image Tag
        run: |
          commit_hash=$(echo $(git rev-parse --short HEAD))
          echo "pull_request_hash=$commit_hash" >> $GITHUB_ENV
      
      # Create a JSON file containing latest commit hash for use throughout pipeline
      - name: Create JSON file for Image Tag State
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: 'hash.json'
          json: '{ "hash":"${{ env.pull_request_hash }}" }'

      # Upload JSON file as github action artifact to be downloaded for later use
      - name: Upload JSON file
        uses: actions/upload-artifact@v3
        with: 
          name: hash.json
          path: hash.json
      
      # Login the BC Gov Openshift (DPIA TOOLS Namespace)
      - name: Cluster Login -> TOOLS Namespace
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_TOOLS_SA_PASSWORD }}"}'
          cmd: |
            'version'
            
      # Login to BC Gov Docker Image Repository
      - name: Login to Openshift Docker
        run : |
          docker login ${{ secrets.OPENSHIFT4_PUBLIC_IMAGE_REPOSITORY_BASE_URL }} -u ${{ secrets.OPENSHIFT4_TOOLS_SA_USERNAME }} -p ${{ secrets.OPENSHIFT4_TOOLS_SA_PASSWORD }}
      
      # Build the DPIA Frontend Application Image via docker-compose
      - name: Build the Docker image
        run: |
          sudo docker-compose build dpia-webapp
      
      # TROUBLESHOOTING - view images present in github action run
      - name: Docker List Images
        run: |
          docker image ls 
      
      # Tag Docker Image built with latest commit hash (ex// $HASH-dev)
      - name: Docker Tag Version
        run: |
          docker tag cirmo-dpia_dpia-webapp ${{ secrets.OPENSHIFT4_APP_PUBLIC_IMAGE_REPOSITORY }}:${{ env.pull_request_hash }}-${{ secrets.ENVIRONMENT }}
      
      # TROUBLESHOOTING - view images present in github action run
      - name: Docker List Images
        run: |
          docker image ls 
          
      # Push docker image to BC Gov Repository
      - name: Docker Push Version
        run: |
          docker push ${{ secrets.OPENSHIFT4_APP_PUBLIC_IMAGE_REPOSITORY }}:${{ env.pull_request_hash }}-${{ secrets.ENVIRONMENT }}
          
  Test-DEV-deploy:
    runs-on: ubuntu-latest
    environment: APP-Dev
    needs: [ Test-DPIA-App-Build-Tag-Push ]
    steps:
    
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      # Login to BC Gov Openshift (DPIA DEV Namespace)
      - name: Cluster Login -> DEV Namespace
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_SA_PASSWORD }}"}'
          cmd: |
            'version'
            
      # Download JSON Artifact with pull request hash
      - name: Download JSON artifact
        uses: actions/download-artifact@v3
        with:
          name: hash.json
          
      # Read value from JSON artifact as a step output
      - name: Read JSON File
        id: json-file
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'hash.json'
          prop_path: 'hash'
          
      # Access step output of pull request hash value and set as a environment variable
      - name: Set Commit Hash Value to Environment
        run: |
          commit_hash=$(echo ${{ steps.json-file.outputs.prop }})
          echo "pull_request_hash=$commit_hash" >> $GITHUB_ENV
            
      # Use deploy helper script to process and apply DPIA Frontend Application template into DEV namespace
      - name: Process and Apply APP DeploymentConfig, Service, Route templates
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
          APPLICATION_NAME: "${{ secrets.TEST_APPLICATION_NAME }}"
          LICENSE_PLATE: "${{ secrets.LICENSE_PLATE }}"
          ENVIRONMENT: "${{ secrets.ENVIRONMENT }}"
          DC_TEMPLATE: "app-test-dc-template.yaml"
          SERVICE_TEMPLATE: "app-test-service-template.yaml"
          ROUTE_TEMPLATE: "app-test-route-template.yaml"
          DIR: "app"
          IMAGE_TAG: "${{ env.pull_request_hash }}-dev"
          VAULT_ROLE: "${{ secrets.VAULT_ROLE }}"
          VAULT_POSTGRES_SECRET_NAME: "${{ secrets.VAULT_POSTGRES_SECRET_NAME }}"
        run: |
          ./.github/helpers/deploy.sh 
          
  Test-DEV-health-check:
    runs-on: ubuntu-latest
    environment:
      name: APP-Dev
      url: https://dev.pia.gov.bc.ca
    needs: [ Test-DEV-deploy ]
    steps:
    
      # Checkout Repository
      - uses: actions/checkout@v2
    
      # Login to BC Gov Openshift (DPIA DEV Namespace)
      - name: Cluster Login -> DEV Namespace
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_SA_PASSWORD }}"}'
          cmd: |
            'version'
      # Use application health helper script to monitor readiness/liveness probe response post deployment  
      - name: Health Check DEV deployment
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
          APPLICATION_NAME: "${{ secrets.TEST_APPLICATION_NAME }}"
        run: |
          ./.github/helpers/application-health.sh
  
  Test-DEV-cleanup:
    runs-on: ubuntu-latest
    environment: APP-Dev
    needs: [ Test-DEV-health-check ]
    steps:

      # Checkout Repository
      - uses: actions/checkout@v2

      # Login to BC Gov Openshift (DPIA DEV Namespace)
      - name: Cluster Login
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_SA_PASSWORD }}"}'
          cmd: |
            'version'
      # Use cleanup helper script to remove any leftover deployment pod objects from previous deployment
      - name: Cleanup previous deployment pod objects
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
        run: |
          ./.github/helpers/cleanup-pods.sh
      # Use cleanup helper script to remove any leftover deployment pod objects from previous deployment
      - name: Cleanup previous replication controller objects
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
        run: |
          ./.github/helpers/cleanup-rc.sh
